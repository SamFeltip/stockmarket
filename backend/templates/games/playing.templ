package games

import (
	"stockmarket/models"
	"strconv"
	"fmt"
	playerStockTempl "stockmarket/templates/player_stocks"
	playerTempl "stockmarket/templates/players"
)

templ GameGridStyle() {
	<style>
        #game-grid {
			height: 100vh;
			max-height: -webkit-fill-available;

            display: grid;

            grid-template-areas: 
                "profile    now-playing header"
                "content    content     feed";

            grid-template-columns: 1fr 3fr 1fr;
            grid-template-rows: 120px 1fr;
            grid-gap: 16px;
        }

        #game-grid > #profile {
            grid-area: profile;
        }

        #game-grid > #now-playing {
            grid-area: now-playing;
        }

        #game-grid > header {
            grid-area: header;
        }

        #game-grid > aside {
            grid-area: feed;
            display: grid;
            grid-template-rows: 1fr auto;
        }

        #game-grid > #content{
            grid-area: content;
			
			display: grid;
    		grid-template-rows: auto 1fr;
        }

    </style>
}

script SetTabListeners() {
    document.querySelector(".player-stock-tab").classList.add("active");

    document.querySelectorAll(".player-stock-tab").forEach(stock => {
        stock.addEventListener("click", function(event){
            document.querySelectorAll(".player-stock-tab").forEach((stock) => {
                stock.classList.remove("active");
            });
            event.target.classList.add("active");
        });


		// Add click event listeners to all child elements within the parent
		const childElements = stock.querySelectorAll('*');
		childElements.forEach(child => {
			child.addEventListener('click', function(event) {
				// Stop event propagation to prevent further bubbling
				event.stopPropagation();
				// Simulate a click event on the parent element
				stock.click();
			});
		});

		
    });

	document.querySelectorAll(".player-tab").forEach(player => {
		player.addEventListener("click", function(event){
			document.querySelectorAll(".player-tab").forEach((player) => {
				player.classList.remove("active");
			});
			event.target.classList.add("active");
		});


		// Add click event listeners to all child elements within the parent
		const childElements = player.querySelectorAll('*');
		childElements.forEach(child => {
			child.addEventListener('click', function(event) {
				// Stop event propagation to prevent further bubbling
				event.stopPropagation();
				// Simulate a click event on the parent element
				player.click();
			});
		});
	});

	document.querySelector("img#show-users").addEventListener("click", function(){
		swapIcons("stocks", "users");
		moveDisplayTabs("player-tabs", "stock-tabs", "left");
	});

	document.querySelector("img#show-stocks").addEventListener("click", function(){
		swapIcons("users", "stocks");
		moveDisplayTabs("stock-tabs", "player-tabs", "right");
	});

}

templ SwapDisplayButton() {
	<script>
		function swapIcons(showImage, hideImage){
			const showImageElem = document.querySelector(`img#show-${showImage}`)
			const hideImageElem = document.querySelector(`img#show-${hideImage}`)
			
			if (!showImageElem || !hideImageElem) {
				console.error("show image or hide image not found")
				return
			}

			showImageElem.classList.add("infront");
			showImageElem.classList.remove("behind");

			hideImageElem.classList.add("behind");
			hideImageElem.classList.remove("infront");

			const current_player_id = document.querySelector("#show-users")?.getAttribute("current-player-id");
			const player_stock_id = document.querySelector("#show-stocks")?.getAttribute("player-stock-id");

			if(current_player_id === null || player_stock_id === null) {
				console.error("current player id or player stock id is null")
				return
			}
			console.log("htmx ajaxing", current_player_id, player_stock_id)
			const fetchPlayersShow = () => {
				htmx.ajax(
					'GET', 
					`/players/show/${current_player_id}`, {
						target: '#content-wrapper', 
						swap:'innerHTML'	
					}
				).then(res => {
					document.querySelectorAll(".player-tab").forEach((player) => {
						player.classList.remove("active");
					});
					document.querySelector(`#player-tab-${current_player_id}`).classList.add("active")
				})
			}

			const fetchPlayerStockShow = () => {
				htmx.ajax(
					'GET', 
					`/player_stocks/show/${player_stock_id}`, {
						target: '#content-wrapper', 
						swap:'innerHTML'	
					}
				).then(res => {
					document.querySelectorAll(".player-stock-tab").forEach((stock) => {
						stock.classList.remove("active");
					});
					document.querySelector(`#player-stock-tab-${player_stock_id}`).classList.add("active")
				})
			}

			if(showImage === "stocks") {
				document.startViewTransition ? document.startViewTransition(fetchPlayersShow) : fetchPlayersShow();
			} else if (showImage === "users"){
				document.startViewTransition ? document.startViewTransition(fetchPlayerStockShow) : fetchPlayerStockShow();
			}
		}		
	</script>
}

templ DisplayButtonStyle() {
	<style>
		.behind {
			position: absolute;
			z-index: 1;
			transform: translate(-10px, 10px) rotate(-6deg);
			transition: transform 0.5s ease;
		}

		.infront {
			position: absolute;
			transform: translate(0) rotate(0deg);
			transition: transform 0.5s ease;
			z-index: 2;
		}
	</style>
}

templ DisplayTabsStyles() {
	<style>
		#tabs .tabs-display-center {
			transform: translateX(0);
			transition: transform 0.5s ease;
		}

		#tabs .tabs-display-right {
			transform: translateX(100%);
			transition: transform 0.5s ease;
		}

		#tabs .tabs-display-left {
			transform: translateX(-100%);
			transition: transform 0.5s ease;
		}
	</style>
}

templ MoveDisplayTabs() {
	<script>
		function moveDisplayTabs(showTabsListID, hideTabsListID, hideTabsDirection) {

			const oppositeTabDirections = {
				"right": "left",
				"left": "right"
			}

			const showTabsList = document.querySelector(`#tabs #${showTabsListID}`);
			if(!showTabsList?.classList){
				console.error("show tabs not exist")
				return
			}

			showTabsList.classList.remove("tabs-display-right");
			showTabsList.classList.remove("tabs-display-left");
			showTabsList.classList.add("tabs-display-center");

			const hideTabsList = document.querySelector(`#tabs #${hideTabsListID}`)

			if(!hideTabsList?.classList) {
				console.error("hide tabs not exist")
				return
			}

			hideTabsList.classList.remove(`tabs-display-center`);
			hideTabsList.classList.add(`tabs-display-${hideTabsDirection}`);
		
		}
	</script>
}

templ Playing(game models.GameDisplay, currentPlayerDisplay models.CurrentPlayerDisplay, players []models.PlayerDisplay) {
	@GameGridStyle()
	<div id="game-grid" class="p-3">
		<div id="profile" class="card card-green d-grid align-items-center align-items-center py-2 px-4 gap-2" style="grid-template-columns: 60px auto; background-color: var(--bs-card-bg);">
			@DisplayButtonStyle()
			@SwapDisplayButton()
			<div style="width: 60px; height: 60px;">
				<img
					id="show-users"
					class="rounded border border-primary border-2 infront"
					style=""
					height="60px"
					width="60px"
					src={ currentPlayerDisplay.UserProfileRoot }
					alt={ currentPlayerDisplay.UserName }
					current-player-id={ strconv.FormatUint(uint64(currentPlayerDisplay.ID), 10) }
				/>
				<img
					id="show-stocks"
					class="rounded border border-primary border-2 p-2 behind"
					style="background-color: var(--bs-primary) !important"
					height="60px"
					width="60px"
					src="/static/imgs/icons/Stock.svg"
					alt="stocks icon"
					player-stock-id={ strconv.FormatUint(uint64(currentPlayerDisplay.PlayerStocks[0].ID), 10) }
				/>
			</div>
			<div>
				<h2 class="text-capitalize mb-0" style="font-size: 1.5rem;">
					{ currentPlayerDisplay.UserName }
				</h2>
				<p>
					Cash £{ strconv.Itoa(currentPlayerDisplay.Cash) }
				</p>
				<p style="font-size: 0.75rem;">
					Net £{ strconv.FormatFloat(currentPlayerDisplay.TotalValue, 'f', -1, 64) }
				</p>
			</div>
		</div>
		<div id="now-playing" class="card card-green p-2 rounded d-flex flex-column align-items-center justify-content-center" style="background-color: var(--bs-card-bg);">
			if game.CurrentUserID == currentPlayerDisplay.UserID {
				<h3 class="primary">
					It's your turn
				</h3>
				<p>
					Buy, sell, use or pass
				</p>
			} else {
				<h3>
					It's { game.CurrentUserName }'s turn!
				</h3>
			}
		</div>
		<header class="card card-green rounded p-3" style="background-color: var(--bs-card-bg);">
			<h1>Stockmarket!</h1>
			<div class="d-flex justify-content-between">
				<div>
					Turn { strconv.Itoa(game.CurrentTurn) }/{ strconv.Itoa(game.PlayerCount * 3) }
				</div>
				<div>
					Period { strconv.Itoa(game.CurrentPeriod + 1) }/{ strconv.Itoa(game.PeriodCount + 1) }
				</div>
			</div>
		</header>
		<div id="content" class="">
			@DisplayTabsStyles()
			@MoveDisplayTabs()
			<div id="tabs" class="overflow-hidden" style="height: 65px;">
				<div
					id="stock-tabs"
					class="h-100 w-100 position-relative tabs-display-center"
				>
					<ol class="h-100 w-100 position-absolute nav nav-tabs d-flex justify-content-between">
						for _, ps := range currentPlayerDisplay.PlayerStocks {
							<li class="nav-item d-flex flex-fill">
								<a
									id={ fmt.Sprintf("player-stock-tab-%s", strconv.FormatUint(uint64(ps.ID), 10)) }
									class="flex-fill player-stock-tab nav-link d-flex flex-row align-items-center justify-content-between gap-1"
									hx-get={ fmt.Sprintf("/player_stocks/show/%s", strconv.FormatUint(uint64(ps.ID), 10)) }
									hx-trigger="click"
									hx-target="#content-wrapper"
									hx-swap="innerHTML transition:true"
								>
									@playerStockTempl.PlayerStockPreview(ps)
								</a>
							</li>
						}
					</ol>
				</div>
				<div
					id="player-tabs"
					class="h-100 w-100 position-relative tabs-display-right"
					style="top: -65px;"
				>
					<ol class="h-100 w-100 position-absolute  nav nav-tabs d-flex justify-content-between">
						for _, player := range players {
							<li class="nav-item d-flex flex-fill">
								<a
									id={ fmt.Sprintf("player-tab-%s", strconv.FormatUint(uint64(player.PlayerID), 10)) }
									class="flex-fill player-tab player nav-link d-flex flex-row gap-2 flex-left align-items-center justify-content-between gap-1"
									hx-get={ fmt.Sprintf("/players/show/%s", strconv.FormatUint(uint64(player.PlayerID), 10)) }
									hx-trigger="click"
									hx-swap="innerHTML transition:true"
									hx-target="#content-wrapper"
								>
									<div class="d-flex flex-row align-items-center gap-1">
										<img class="rounded" width="40px" src={ player.UserProfileRoot } alt={ player.UserName }/>
									</div>
									<div>
										<p>
											{ player.UserName }
										</p>
										<p style="font-size: 0.75rem;">
											£{ strconv.Itoa(player.Cash) }
										</p>
									</div>
								</a>
							</li>
						}
					</ol>
				</div>
			</div>
			@SetTabListeners()
			@playerStockTempl.PlayViewStyles()
			@playerStockTempl.ModalStyles()
			@playerTempl.PlayerPortfolioStyles()
			<div
				id="content-wrapper"
				class="d-flex bg-white text-black rounded-bottom"
				hx-swap="innerHTML"
				hx-trigger="load"
				hx-get={ fmt.Sprintf("/player_stocks/show/%s", strconv.FormatUint(uint64(currentPlayerDisplay.PlayerStocks[0].ID), 10)) }
			></div>
		</div>
		<aside class="rounded bg-white text-black p-3">
			<div class="d-grid" style="grid-template-rows: auto 1fr;">
				<h2 class="text-black">
					Feed
				</h2>
				<div class="d-flex">
					<div id="feed-body" hx-get={ fmt.Sprintf("/feed_items/show/%s", game.ID) } hx-swap="outerHTML" hx-trigger="load"></div>
				</div>
			</div>
			if game.CurrentUserID == currentPlayerDisplay.UserID {
				<form
					hx-post="/api/games/action"
					hx-target="main"
					hx-swap="innerHTML"
					hx-trigger="submit"
				>
					<input type="hidden" name="gameID" value={ game.ID }/>
					<input type="hidden" name="game_action" value={ string(models.PlayerPass) }/>
					<button
						type="submit"
						id="pass-button"
						class="btn btn-secondary w-100"
					>
						PASS
					</button>
				</form>
			}
		</aside>
	</div>
}

templ PlayingSocket(game models.GameDisplay, currentPlayerDisplay models.CurrentPlayerDisplay, players []models.PlayerDisplay) {
	<div hx-swap-oob="innerHTML:main">
		@Playing(game, currentPlayerDisplay, players)
	</div>
}
