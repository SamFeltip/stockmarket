package player_stocks

import (
	"stockmarket/models"
	"strconv"
	"fmt"
)

templ PlayViewStyles() {
	<style>
        #play-view {
            display: grid;
            grid-template-areas: 
                "stocks investors"
                "insights price-charts"
                "insights stock-info"
                "buy-button sell-button";

            grid-template-columns: 1fr 1fr;
            grid-template-rows: 100px 1fr auto auto;
            
            grid-gap: 40px;
        }

		#play-view.watching {

            grid-template-areas: 
                "stocks investors"
                "insights price-charts"
                "insights stock-info";
            grid-template-rows: 100px 1fr auto;
			
        }

        #play-view > #stocks {
            grid-area: stocks;
        }

        #play-view > #investors {
            grid-area: investors;
        }

        #play-view > #insights {
            grid-area: insights;
        }

        #play-view > #price-charts {
            grid-area: price-charts;
        }

        #play-view > #stock-info {
            grid-area: stock-info;
        }
    </style>
}

templ TotalInsight(playerStockDisplay models.PlayerStockDisplay) {
	if playerStockDisplay.TotalInsight > 0 {
		<div class="total-insight text-success d-flex flex-row align-items-center">
			<img height="6px" class="pe-2" src="/static/imgs/icons/stock_up.svg" alt="stock up arrow"/>
			<p style="font-size: 0.75rem">
				£{ fmt.Sprintf("%.2f", playerStockDisplay.TotalInsight) }
			</p>
		</div>
	} else if playerStockDisplay.TotalInsight < 0 {
		<div class="total-insight text-danger d-flex flex-row align-items-center">
			<img height="6px" class="pe-2" src="/static/imgs/icons/stock_down.svg" alt="stock down arrow"/>
			<p style="font-size: 0.75rem">
				£{ fmt.Sprintf("%.2f", playerStockDisplay.TotalInsight) }
			</p>
		</div>
	} else {
		<div class="total-insight text-secondary">
			<p style="font-size: 0.75rem">
                boring!
            </p>
		</div>
	}
}


templ PlayerStockPreview(playerStockDisplay models.PlayerStockDisplay) {

	<div class="d-flex justify-content-between flex-fill">
		<div class="d-flex flex-row align-items-center gap-1">
			<img width="30px" src={ playerStockDisplay.StockImagePath } alt={ playerStockDisplay.StockName }/>
		</div>
        <div class="text-end">
            <p>
                £{ fmt.Sprintf("%.2f", playerStockDisplay.GameStockValue) }
            </p>
		    @TotalInsight(playerStockDisplay)
        </div>
	</div>
}



templ PlayerStockPlayer(playerStockPlayerResult models.PlayerStockPlayerResult) {
	<div id="stocks" class="rounded bg-secondary p-2 d-flex flex-column text-center justify-content-center">
		<p>
			{ strconv.Itoa(playerStockPlayerResult.StocksHeld) } Shares held
		</p>
		<p>
			£{ fmt.Sprintf("%.2f", playerStockPlayerResult.StockValue) } stock evaluation
		</p>
	</div>
}

templ Investors(investors []models.InvestorResult) {
	<div id="investors">
		<h4 class="text-black">Investors</h4>
		<div class="d-flex flex-row gap-2">
			for _, investor := range investors {
				<div class="d-flex flex-column align-items-center">
					<img class="rounded" width="56px" src={ investor.ProfileRoot } alt={ investor.Name }/>
					<p>
						{ strconv.Itoa(investor.Quantity) }
					</p>
				</div>
			}
		</div>
	</div>
}

templ TotalInsightResultButton(playerStockDisplay models.PlayerStockDisplay) {
	if playerStockDisplay.TotalInsight > 0 {
		<div class="btn btn-success">
			<img class="pe-2" height="16px" src="/static/imgs/icons/stock_up_black.svg" alt="stock up arrow"/>
			£{ fmt.Sprintf("%.2f", playerStockDisplay.TotalInsight) }
		</div>
	} else if playerStockDisplay.TotalInsight < 0 {
		<div class="btn btn-danger">
			<img class="pe-2" height="16px" src="/static/imgs/icons/stock_down_black.svg" alt="stock down arrow"/>
			£{ fmt.Sprintf("%.2f", playerStockDisplay.TotalInsight) }
		</div>
	} else {
		<div class="btn btn-secondary">
			boring!
		</div>
	}
}

templ Insights(insightResults []models.InsightResult){
	<div class="d-grid gap-1 overflow-auto" style="grid-template-columns: 1fr 1fr; max-height: 60vh;">
		for _, insightResult := range insightResults {
			<div class="card">
				<div class="card-body text-center">
					<h5 class="text-black">
						if insightResult.Value > 0 {
							<img class="pe-2" height="16px" src="/static/imgs/icons/stock_up.svg" alt="stock up arrow"/>
						} else {
							<img class="pe-2" height="16px" src="/static/imgs/icons/stock_down.svg" alt="stock down arrow"/>
						}
						£{ fmt.Sprintf("%.2f", insightResult.Value) }
					</h5>
					<p>
						{ insightResult.Description }
					</p>
				</div>
			</div>
		}
	</div>
}

templ StockInfo(stockInfoResult models.StockInfoResult) {
	<div id="stock-info" class="d-flex flex-column">
		<h4 class="text-black">Info</h4>
		<div class="gap-3 d-flex flex-row">
			<div class="card flex-fill">
				<div class="card-body text-center">
					<p class="fs-5">
						{ strconv.FormatFloat(stockInfoResult.Variation, 'f', -1, 64) }
					</p>
					<p class="text-secondary">
						Volitility
					</p>
				</div>
			</div>
			<div class="card flex-fill">
				<div class="card-body text-center">
					if true {
						<p class="fs-5">
							N/A
						</p>
					} else {
						// todo: director name
						director name 
					}
					<p class="text-secondary">
						Director
					</p>
				</div>
			</div>
			<div class="card flex-fill">
				<div class="card-body text-center">
					<p class="fs-5">
						{ strconv.Itoa(stockInfoResult.SharesAvailable) }
					</p>
					<p class="text-secondary">
						Shares available
					</p>
				</div>
			</div>
		</div>
	</div>
}

templ Show(playerStockID uint, playerStockPlayer models.PlayerStockPlayerResult, playerStockDisplay models.PlayerStockDisplay, investors []models.InvestorResult, insights []models.InsightResult, stockInfo models.StockInfoResult, isCurrentPlayer bool) {
	<div id="play-view" class={"bg-white text-black rounded-bottom p-3", templ.KV("watching", !isCurrentPlayer)}>	
		@PlayViewStyles()
		@PlayerStockPlayer(playerStockPlayer)
		@Investors(investors)
		<div id="insights" class="d-flex flex-column gap-2">
			<div class="d-flex justify-content-between">
				<h4 class="text-black">Your insights</h4>
				@TotalInsightResultButton(playerStockDisplay)
			</div>
			@Insights(insights)
		</div>
		<div id="price-charts">
			<h4 class="text-black">Price charts</h4>
		</div>
		@StockInfo(stockInfo)
		if isCurrentPlayer {
			<button id="buy-button" class="btn btn-success" type="button" data-bs-toggle="modal" data-bs-target="#buyModal">
				Buy
			</button>
			<button id="sell-button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#sellModal">
				Sell
			</button>
		}
	</div>
	@ModalStyles()
	@BuyModal(playerStockDisplay, playerStockPlayer, stockInfo, playerStockID)
	@SellModal(playerStockDisplay, playerStockPlayer, stockInfo, playerStockID)

}